/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/open-api/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Open Api Schema */
        get: operations["GetOpenApiSchema"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many objects */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                objects?: components["schemas"]["ObjectForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One object */
        post: operations["createOneObject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/objects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One object */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                object?: components["schemas"]["ObjectForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One object */
        delete: operations["deleteOneObject"];
        options?: never;
        head?: never;
        /** Update One object */
        patch: operations["updateOneObject"];
        trace?: never;
    };
    "/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many fields */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                fields?: components["schemas"]["FieldForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One field */
        post: operations["createOneField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fields/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One field */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                field?: components["schemas"]["FieldForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One field */
        delete: operations["deleteOneField"];
        options?: never;
        head?: never;
        /** Update One field */
        patch: operations["updateOneField"];
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many webhooks */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                webhooks?: components["schemas"]["WebhookForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One webhook */
        post: operations["createOneWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One webhook */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                webhook?: components["schemas"]["WebhookForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One webhook */
        delete: operations["deleteOneWebhook"];
        options?: never;
        head?: never;
        /** Update One webhook */
        patch: operations["updateOneWebhook"];
        trace?: never;
    };
    "/apiKeys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many apiKeys */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                apiKeys?: components["schemas"]["ApiKeyForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One apiKey */
        post: operations["createOneApiKey"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apiKeys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One apiKey */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                apiKey?: components["schemas"]["ApiKeyForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One apiKey */
        delete: operations["deleteOneApiKey"];
        options?: never;
        head?: never;
        /** Update One apiKey */
        patch: operations["updateOneApiKey"];
        trace?: never;
    };
    "/views": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many views */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                views?: components["schemas"]["ViewForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One view */
        post: operations["createOneView"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/views/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One view */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                view?: components["schemas"]["ViewForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One view */
        delete: operations["deleteOneView"];
        options?: never;
        head?: never;
        /** Update One view */
        patch: operations["updateOneView"];
        trace?: never;
    };
    "/viewFields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many viewFields */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewFields?: components["schemas"]["ViewFieldForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One viewField */
        post: operations["createOneViewField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/viewFields/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One viewField */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewField?: components["schemas"]["ViewFieldForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One viewField */
        delete: operations["deleteOneViewField"];
        options?: never;
        head?: never;
        /** Update One viewField */
        patch: operations["updateOneViewField"];
        trace?: never;
    };
    "/viewFilters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many viewFilters */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewFilters?: components["schemas"]["ViewFilterForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One viewFilter */
        post: operations["createOneViewFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/viewFilters/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One viewFilter */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewFilter?: components["schemas"]["ViewFilterForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One viewFilter */
        delete: operations["deleteOneViewFilter"];
        options?: never;
        head?: never;
        /** Update One viewFilter */
        patch: operations["updateOneViewFilter"];
        trace?: never;
    };
    "/viewSorts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many viewSorts */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewSorts?: components["schemas"]["ViewSortForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One viewSort */
        post: operations["createOneViewSort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/viewSorts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One viewSort */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewSort?: components["schemas"]["ViewSortForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One viewSort */
        delete: operations["deleteOneViewSort"];
        options?: never;
        head?: never;
        /** Update One viewSort */
        patch: operations["updateOneViewSort"];
        trace?: never;
    };
    "/viewGroups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many viewGroups */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewGroups?: components["schemas"]["ViewGroupForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One viewGroup */
        post: operations["createOneViewGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/viewGroups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One viewGroup */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewGroup?: components["schemas"]["ViewGroupForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One viewGroup */
        delete: operations["deleteOneViewGroup"];
        options?: never;
        head?: never;
        /** Update One viewGroup */
        patch: operations["updateOneViewGroup"];
        trace?: never;
    };
    "/viewFilterGroups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find Many viewFilterGroups */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of objects returned. */
                    limit?: components["parameters"]["limit"];
                    /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    starting_after?: components["parameters"]["startingAfter"];
                    /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
                    ending_before?: components["parameters"]["endingBefore"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewFilterGroups?: components["schemas"]["ViewFilterGroupForResponse"][];
                            };
                            pageInfo?: {
                                hasNextPage?: boolean;
                                /** Format: uuid */
                                startCursor?: string;
                                /** Format: uuid */
                                endCursor?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /** Create One viewFilterGroup */
        post: operations["createOneViewFilterGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/viewFilterGroups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find One viewFilterGroup */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Object id. */
                    id: components["parameters"]["idPath"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                viewFilterGroup?: components["schemas"]["ViewFilterGroupForResponse"];
                            };
                        };
                    };
                };
                400: components["responses"]["400"];
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        /** Delete One viewFilterGroup */
        delete: operations["deleteOneViewFilterGroup"];
        options?: never;
        head?: never;
        /** Update One viewFilterGroup */
        patch: operations["updateOneViewFilterGroup"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description An object */
        Object: {
            nameSingular?: string;
            namePlural?: string;
            labelSingular?: string;
            labelPlural?: string;
            description?: string;
            icon?: string;
            /** Format: uuid */
            labelIdentifierFieldMetadataId?: string;
            /** Format: uuid */
            imageIdentifierFieldMetadataId?: string;
        };
        /** @description A list of objects */
        Objects: components["schemas"]["Object"][];
        /** @description An object */
        ObjectForUpdate: {
            isActive?: boolean;
        };
        /** @description An object */
        ObjectForResponse: {
            nameSingular?: string;
            namePlural?: string;
            labelSingular?: string;
            labelPlural?: string;
            description?: string;
            icon?: string;
            /** Format: uuid */
            labelIdentifierFieldMetadataId?: string;
            /** Format: uuid */
            imageIdentifierFieldMetadataId?: string;
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            dataSourceId?: string;
            isCustom?: boolean;
            isActive?: boolean;
            isSystem?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            fields?: {
                edges?: {
                    node?: components["schemas"]["FieldForResponse"][];
                };
            };
        };
        /** @description A list of objects */
        ObjectsForResponse: components["schemas"]["ObjectForResponse"][];
        /** @description A field */
        Field: {
            /** @enum {string} */
            type: "UUID" | "TEXT" | "PHONES" | "EMAILS" | "DATE_TIME" | "DATE" | "BOOLEAN" | "NUMBER" | "NUMERIC" | "LINKS" | "CURRENCY" | "FULL_NAME" | "RATING" | "SELECT" | "MULTI_SELECT" | "RELATION" | "MORPH_RELATION" | "POSITION" | "ADDRESS" | "RAW_JSON" | "RICH_TEXT" | "RICH_TEXT_V2" | "ACTOR" | "ARRAY" | "TS_VECTOR";
            /** Format: uuid */
            objectMetadataId: string;
            name: string;
            label: string;
            description?: string;
            icon?: string;
            defaultValue?: unknown;
            isNullable?: boolean;
            settings?: Record<string, never>;
            /** @description For enum field types like SELECT or MULTI_SELECT */
            options?: {
                color?: string;
                label?: string;
                /** @example OPTION_1 */
                value?: string;
                position?: number;
            }[];
        };
        /** @description A list of fields */
        Fields: components["schemas"]["Field"][];
        /** @description A field */
        FieldForUpdate: {
            name?: string;
            label?: string;
            description?: string;
            icon?: string;
            defaultValue?: unknown;
            isNullable?: boolean;
            settings?: Record<string, never>;
            /** @description For enum field types like SELECT or MULTI_SELECT */
            options?: {
                color?: string;
                label?: string;
                /** @example OPTION_1 */
                value?: string;
                position?: number;
            }[];
        };
        /** @description A field */
        FieldForResponse: {
            /** @enum {string} */
            type?: "UUID" | "TEXT" | "PHONES" | "EMAILS" | "DATE_TIME" | "DATE" | "BOOLEAN" | "NUMBER" | "NUMERIC" | "LINKS" | "CURRENCY" | "FULL_NAME" | "RATING" | "SELECT" | "MULTI_SELECT" | "RELATION" | "MORPH_RELATION" | "POSITION" | "ADDRESS" | "RAW_JSON" | "RICH_TEXT" | "RICH_TEXT_V2" | "ACTOR" | "ARRAY" | "TS_VECTOR";
            /** Format: uuid */
            objectMetadataId?: string;
            name?: string;
            label?: string;
            description?: string;
            icon?: string;
            defaultValue?: unknown;
            isNullable?: boolean;
            settings?: Record<string, never>;
            /** @description For enum field types like SELECT or MULTI_SELECT */
            options?: {
                color?: string;
                label?: string;
                /** @example OPTION_1 */
                value?: string;
                position?: number;
            }[];
            /** Format: uuid */
            id?: string;
            isCustom?: boolean;
            isActive?: boolean;
            isSystem?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** @description A list of fields */
        FieldsForResponse: components["schemas"]["FieldForResponse"][];
        /** @description A webhook */
        Webhook: {
            targetUrl: string;
            /** @default [
             *       "*.*"
             *     ] */
            operations: string[];
            description?: string;
            secret?: string;
        };
        /** @description A list of webhooks */
        Webhooks: components["schemas"]["Webhook"][];
        /** @description A webhook for update */
        WebhookForUpdate: {
            targetUrl?: string;
            /** @default [] */
            operations: string[];
            description?: string;
            secret?: string;
        };
        /** @description A webhook */
        WebhookForResponse: {
            /** Format: uuid */
            id?: string;
            targetUrl?: string;
            operations?: string[];
            description?: string;
            secret?: string;
            /** Format: uuid */
            workspaceId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        /** @description A list of webhooks */
        WebhooksForResponse: components["schemas"]["WebhookForResponse"][];
        /** @description An API key */
        ApiKey: {
            name: string;
            /** Format: date-time */
            expiresAt: string;
            /** Format: uuid */
            roleId: string;
        };
        /** @description A list of apiKeys */
        ApiKeys: components["schemas"]["ApiKey"][];
        /** @description An API key for update */
        ApiKeyForUpdate: {
            name?: string;
            /** Format: date-time */
            expiresAt?: string;
            /**
             * Format: date-time
             * @description Set to null to clear revocation. Defaults to null if not provided.
             */
            revokedAt?: string;
        };
        /** @description An API key */
        ApiKeyForResponse: {
            /** Format: uuid */
            id?: string;
            name?: string;
            /** Format: date-time */
            expiresAt?: string;
            /** Format: date-time */
            revokedAt?: string;
            /** Format: uuid */
            roleId?: string;
            /** Format: uuid */
            workspaceId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** @description A list of apiKeys */
        ApiKeysForResponse: components["schemas"]["ApiKeyForResponse"][];
        /** @description A view */
        View: {
            name: string;
            /** Format: uuid */
            objectMetadataId: string;
            /**
             * @default TABLE
             * @enum {string}
             */
            type: "TABLE" | "KANBAN";
            /** @default INDEX */
            key: string;
            icon: string;
            /** @default 0 */
            position: number;
            /** @default false */
            isCompact: boolean;
            /**
             * @default SIDE_PANEL
             * @enum {string}
             */
            openRecordIn: "SIDE_PANEL" | "RECORD_PAGE";
            /** @enum {string} */
            kanbanAggregateOperation?: "AVG" | "COUNT" | "MAX" | "MIN" | "SUM";
            /** Format: uuid */
            kanbanAggregateOperationFieldMetadataId?: string;
            anyFieldFilterValue?: string;
        };
        /** @description A list of views */
        Views: components["schemas"]["View"][];
        /** @description A view for update */
        ViewForUpdate: {
            name?: string;
            /** @enum {string} */
            type?: "TABLE" | "KANBAN";
            key?: string;
            icon?: string;
            position?: number;
            isCompact?: boolean;
            /** @enum {string} */
            openRecordIn?: "SIDE_PANEL" | "RECORD_PAGE";
            /** @enum {string} */
            kanbanAggregateOperation?: "AVG" | "COUNT" | "MAX" | "MIN" | "SUM";
            /** Format: uuid */
            kanbanAggregateOperationFieldMetadataId?: string;
            anyFieldFilterValue?: string;
        };
        /** @description A view */
        ViewForResponse: {
            /** Format: uuid */
            id?: string;
            name?: string;
            /** Format: uuid */
            objectMetadataId?: string;
            /** @enum {string} */
            type?: "TABLE" | "KANBAN";
            key?: string;
            icon?: string;
            position?: number;
            isCompact?: boolean;
            /** @enum {string} */
            openRecordIn?: "SIDE_PANEL" | "RECORD_PAGE";
            /** @enum {string} */
            kanbanAggregateOperation?: "AVG" | "COUNT" | "MAX" | "MIN" | "SUM";
            /** Format: uuid */
            kanbanAggregateOperationFieldMetadataId?: string;
            anyFieldFilterValue?: string;
            /** Format: uuid */
            workspaceId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        /** @description A list of views */
        ViewsForResponse: components["schemas"]["ViewForResponse"][];
        /** @description A view field */
        ViewField: {
            /** Format: uuid */
            fieldMetadataId: string;
            /** Format: uuid */
            viewId: string;
            /** @default true */
            isVisible: boolean;
            /** @default 0 */
            size: number;
            /** @default 0 */
            position: number;
            /** @enum {string} */
            aggregateOperation?: "AVG" | "COUNT" | "MAX" | "MIN" | "SUM";
        };
        /** @description A list of viewFields */
        ViewFields: components["schemas"]["ViewField"][];
        /** @description A view field for update */
        ViewFieldForUpdate: {
            isVisible?: boolean;
            size?: number;
            position?: number;
            /** @enum {string} */
            aggregateOperation?: "AVG" | "COUNT" | "MAX" | "MIN" | "SUM";
        };
        /** @description A view field */
        ViewFieldForResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            fieldMetadataId?: string;
            /** Format: uuid */
            viewId?: string;
            isVisible?: boolean;
            size?: number;
            position?: number;
            /** @enum {string} */
            aggregateOperation?: "AVG" | "COUNT" | "MAX" | "MIN" | "SUM";
            /** Format: uuid */
            workspaceId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        /** @description A list of viewFields */
        ViewFieldsForResponse: components["schemas"]["ViewFieldForResponse"][];
        /** @description A view filter */
        ViewFilter: {
            /** Format: uuid */
            fieldMetadataId: string;
            /** Format: uuid */
            viewId: string;
            /**
             * @default CONTAINS
             * @enum {string}
             */
            operand: "IS" | "IS_NOT_NULL" | "IS_NOT" | "LESS_THAN_OR_EQUAL" | "GREATER_THAN_OR_EQUAL" | "IS_BEFORE" | "IS_AFTER" | "CONTAINS" | "DOES_NOT_CONTAIN" | "IS_EMPTY" | "IS_NOT_EMPTY" | "IS_RELATIVE" | "IS_IN_PAST" | "IS_IN_FUTURE" | "IS_TODAY" | "VECTOR_SEARCH";
            /** @description Filter value (JSON format) */
            value: Record<string, never>;
            /** Format: uuid */
            viewFilterGroupId?: string;
            positionInViewFilterGroup?: number;
            subFieldName?: string;
        };
        /** @description A list of viewFilters */
        ViewFilters: components["schemas"]["ViewFilter"][];
        /** @description A view filter for update */
        ViewFilterForUpdate: {
            /** @enum {string} */
            operand?: "IS" | "IS_NOT_NULL" | "IS_NOT" | "LESS_THAN_OR_EQUAL" | "GREATER_THAN_OR_EQUAL" | "IS_BEFORE" | "IS_AFTER" | "CONTAINS" | "DOES_NOT_CONTAIN" | "IS_EMPTY" | "IS_NOT_EMPTY" | "IS_RELATIVE" | "IS_IN_PAST" | "IS_IN_FUTURE" | "IS_TODAY" | "VECTOR_SEARCH";
            /** @description Filter value (JSON format) */
            value?: Record<string, never>;
            /** Format: uuid */
            viewFilterGroupId?: string;
            positionInViewFilterGroup?: number;
            subFieldName?: string;
        };
        /** @description A view filter */
        ViewFilterForResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            fieldMetadataId?: string;
            /** Format: uuid */
            viewId?: string;
            /** @enum {string} */
            operand?: "IS" | "IS_NOT_NULL" | "IS_NOT" | "LESS_THAN_OR_EQUAL" | "GREATER_THAN_OR_EQUAL" | "IS_BEFORE" | "IS_AFTER" | "CONTAINS" | "DOES_NOT_CONTAIN" | "IS_EMPTY" | "IS_NOT_EMPTY" | "IS_RELATIVE" | "IS_IN_PAST" | "IS_IN_FUTURE" | "IS_TODAY" | "VECTOR_SEARCH";
            /** @description Filter value (JSON format) */
            value?: Record<string, never>;
            /** Format: uuid */
            viewFilterGroupId?: string;
            positionInViewFilterGroup?: number;
            subFieldName?: string;
            /** Format: uuid */
            workspaceId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        /** @description A list of viewFilters */
        ViewFiltersForResponse: components["schemas"]["ViewFilterForResponse"][];
        /** @description A view sort */
        ViewSort: {
            /** Format: uuid */
            fieldMetadataId: string;
            /** Format: uuid */
            viewId: string;
            /**
             * @default ASC
             * @enum {string}
             */
            direction: "ASC" | "DESC";
        };
        /** @description A list of viewSorts */
        ViewSorts: components["schemas"]["ViewSort"][];
        /** @description A view sort for update */
        ViewSortForUpdate: {
            /** @enum {string} */
            direction?: "ASC" | "DESC";
        };
        /** @description A view sort */
        ViewSortForResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            fieldMetadataId?: string;
            /** Format: uuid */
            viewId?: string;
            /** @enum {string} */
            direction?: "ASC" | "DESC";
            /** Format: uuid */
            workspaceId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        /** @description A list of viewSorts */
        ViewSortsForResponse: components["schemas"]["ViewSortForResponse"][];
        /** @description A view group */
        ViewGroup: {
            /** Format: uuid */
            fieldMetadataId: string;
            /** Format: uuid */
            viewId: string;
            fieldValue: string;
            /** @default true */
            isVisible: boolean;
            /** @default 0 */
            position: number;
        };
        /** @description A list of viewGroups */
        ViewGroups: components["schemas"]["ViewGroup"][];
        /** @description A view group for update */
        ViewGroupForUpdate: {
            fieldValue?: string;
            isVisible?: boolean;
            position?: number;
        };
        /** @description A view group */
        ViewGroupForResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            fieldMetadataId?: string;
            /** Format: uuid */
            viewId?: string;
            fieldValue?: string;
            isVisible?: boolean;
            position?: number;
            /** Format: uuid */
            workspaceId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        /** @description A list of viewGroups */
        ViewGroupsForResponse: components["schemas"]["ViewGroupForResponse"][];
        /** @description A view filter group */
        ViewFilterGroup: {
            /** Format: uuid */
            viewId: string;
            /** Format: uuid */
            parentViewFilterGroupId?: string;
            /**
             * @default AND
             * @enum {string}
             */
            logicalOperator: "AND" | "OR" | "NOT";
            positionInViewFilterGroup?: number;
        };
        /** @description A list of viewFilterGroups */
        ViewFilterGroups: components["schemas"]["ViewFilterGroup"][];
        /** @description A view filter group for update */
        ViewFilterGroupForUpdate: {
            /** Format: uuid */
            parentViewFilterGroupId?: string;
            /** @enum {string} */
            logicalOperator?: "AND" | "OR" | "NOT";
            positionInViewFilterGroup?: number;
        };
        /** @description A view filter group */
        ViewFilterGroupForResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            viewId?: string;
            /** Format: uuid */
            parentViewFilterGroupId?: string;
            /** @enum {string} */
            logicalOperator?: "AND" | "OR" | "NOT";
            positionInViewFilterGroup?: number;
            /** Format: uuid */
            workspaceId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        /** @description A list of viewFilterGroups */
        ViewFilterGroupsForResponse: components["schemas"]["ViewFilterGroupForResponse"][];
    };
    responses: {
        /** @description Bad Request */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    statusCode?: number;
                    messages?: string[];
                    error?: string;
                };
            };
        };
        /** @description Unauthorized */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    statusCode?: number;
                    message?: string;
                    error?: string;
                };
            };
        };
    };
    parameters: {
        /** @description Object id. */
        idPath: string;
        /** @description Returns objects starting after a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
        startingAfter: string;
        /** @description Returns objects ending before a specific cursor. You can find cursors in **startCursor** and **endCursor** in **pageInfo** in response data */
        endingBefore: string;
        /** @description Format: field[COMPARATOR]:value,field2[COMPARATOR]:value2
         *         Refer to the filter section at the top of the page for more details. */
        filter: string;
        /** @description Determines the level of nested related objects to include in the response.
         *         - 0: Primary object only
         *         - 1: Primary object + direct relations
         *         - 2: Primary object + direct relations + nested relations */
        depth: 0 | 1;
        /** @description Format: **field_name_1,field_name_2[DIRECTION_2]
         *         Refer to the filter section at the top of the page for more details. */
        orderBy: string;
        /** @description Limits the number of objects returned. */
        limit: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetOpenApiSchema: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        openapi?: string;
                        info?: {
                            title?: string;
                            description?: string;
                            termsOfService?: string;
                            contact?: {
                                email?: string;
                            };
                            license?: {
                                name?: string;
                                url?: string;
                            };
                        };
                        servers?: {
                            url?: string;
                            description?: string;
                        }[];
                        components?: {
                            schemas?: Record<string, never>;
                            parameters?: Record<string, never>;
                            responses?: Record<string, never>;
                        };
                        paths?: Record<string, never>;
                        tags?: Record<string, never>;
                    };
                };
            };
        };
    };
    createOneObject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Object"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneObject?: components["schemas"]["ObjectForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneObject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneObject?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneObject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ObjectForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneObject?: components["schemas"]["ObjectForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    createOneField: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Field"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneField?: components["schemas"]["FieldForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneField?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FieldForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneField?: components["schemas"]["FieldForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    createOneWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Webhook"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneWebhook?: components["schemas"]["WebhookForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneWebhook?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebhookForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneWebhook?: components["schemas"]["WebhookForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    createOneApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiKey"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneApiKey?: components["schemas"]["ApiKeyForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneApiKey?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneApiKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiKeyForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneApiKey?: components["schemas"]["ApiKeyForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    createOneView: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["View"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneView?: components["schemas"]["ViewForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneView: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneView?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneView: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneView?: components["schemas"]["ViewForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    createOneViewField: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewField"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneViewField?: components["schemas"]["ViewFieldForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneViewField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneViewField?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneViewField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewFieldForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneViewField?: components["schemas"]["ViewFieldForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    createOneViewFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewFilter"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneViewFilter?: components["schemas"]["ViewFilterForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneViewFilter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneViewFilter?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneViewFilter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewFilterForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneViewFilter?: components["schemas"]["ViewFilterForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    createOneViewSort: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewSort"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneViewSort?: components["schemas"]["ViewSortForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneViewSort: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneViewSort?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneViewSort: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewSortForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneViewSort?: components["schemas"]["ViewSortForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    createOneViewGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewGroup"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneViewGroup?: components["schemas"]["ViewGroupForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneViewGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneViewGroup?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneViewGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewGroupForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneViewGroup?: components["schemas"]["ViewGroupForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    createOneViewFilterGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewFilterGroup"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            createOneViewFilterGroup?: components["schemas"]["ViewFilterGroupForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    deleteOneViewFilterGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            deleteOneViewFilterGroup?: {
                                /** Format: uuid */
                                id?: string;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
    updateOneViewFilterGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object id. */
                id: components["parameters"]["idPath"];
            };
            cookie?: never;
        };
        /** @description body */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ViewFilterGroupForUpdate"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            updateOneViewFilterGroup?: components["schemas"]["ViewFilterGroupForResponse"];
                        };
                    };
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
        };
    };
}
